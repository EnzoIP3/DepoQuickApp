// <auto-generated />
using System;
using HomeConnect.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeConnect.DataAccess.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20241005062913_BusinessOwnerPermissionsSeed")]
    partial class BusinessOwnerPermissionsSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessLogic.Auth.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("BusinessLogic.BusinessOwners.Entities.Business", b =>
                {
                    b.Property<string>("Rut")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Rut");

                    b.HasIndex("OwnerId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("BusinessLogic.Devices.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessRut")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ConnectionState")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModelNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryPhotos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessRut");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("BusinessLogic.Devices.Entities.OwnedDevice", b =>
                {
                    b.Property<Guid>("HardwareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HomeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HardwareId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("HomeId");

                    b.ToTable("OwnedDevices");
                });

            modelBuilder.Entity("BusinessLogic.HomeOwners.Entities.Home", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("MaxMembers")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Homes");
                });

            modelBuilder.Entity("BusinessLogic.HomeOwners.Entities.HomePermission", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Value");

                    b.HasIndex("MemberId");

                    b.ToTable("HomePermission");
                });

            modelBuilder.Entity("BusinessLogic.HomeOwners.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HomeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HomeId");

                    b.HasIndex("UserId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("BusinessLogic.Notifications.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnedDeviceHardwareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnedDeviceHardwareId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BusinessLogic.Roles.Entities.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Name = "Admin"
                        },
                        new
                        {
                            Name = "HomeOwner"
                        },
                        new
                        {
                            Name = "BusinessOwner"
                        });
                });

            modelBuilder.Entity("BusinessLogic.Roles.Entities.SystemPermission", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Value");

                    b.HasIndex("RoleName");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Value = "create-administrator",
                            RoleName = "Admin"
                        },
                        new
                        {
                            Value = "delete-administrator",
                            RoleName = "Admin"
                        },
                        new
                        {
                            Value = "create-business-owner",
                            RoleName = "Admin"
                        },
                        new
                        {
                            Value = "get-all-users",
                            RoleName = "Admin"
                        },
                        new
                        {
                            Value = "get-all-businesses",
                            RoleName = "Admin"
                        },
                        new
                        {
                            Value = "create-home",
                            RoleName = "HomeOwner"
                        },
                        new
                        {
                            Value = "add-member",
                            RoleName = "HomeOwner"
                        },
                        new
                        {
                            Value = "add-device",
                            RoleName = "HomeOwner"
                        },
                        new
                        {
                            Value = "get-devices",
                            RoleName = "HomeOwner"
                        },
                        new
                        {
                            Value = "get-members",
                            RoleName = "HomeOwner"
                        },
                        new
                        {
                            Value = "create-business",
                            RoleName = "BusinessOwner"
                        },
                        new
                        {
                            Value = "create-camera",
                            RoleName = "BusinessOwner"
                        },
                        new
                        {
                            Value = "create-sensor",
                            RoleName = "BusinessOwner"
                        });
                });

            modelBuilder.Entity("BusinessLogic.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessLogic.BusinessOwners.Entities.Business", b =>
                {
                    b.HasOne("BusinessLogic.Users.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BusinessLogic.Devices.Entities.Device", b =>
                {
                    b.HasOne("BusinessLogic.BusinessOwners.Entities.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessRut");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("BusinessLogic.Devices.Entities.OwnedDevice", b =>
                {
                    b.HasOne("BusinessLogic.Devices.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessLogic.HomeOwners.Entities.Home", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Home");
                });

            modelBuilder.Entity("BusinessLogic.HomeOwners.Entities.Home", b =>
                {
                    b.HasOne("BusinessLogic.Users.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BusinessLogic.HomeOwners.Entities.HomePermission", b =>
                {
                    b.HasOne("BusinessLogic.HomeOwners.Entities.Member", null)
                        .WithMany("HomePermissions")
                        .HasForeignKey("MemberId");
                });

            modelBuilder.Entity("BusinessLogic.HomeOwners.Entities.Member", b =>
                {
                    b.HasOne("BusinessLogic.HomeOwners.Entities.Home", null)
                        .WithMany("Members")
                        .HasForeignKey("HomeId");

                    b.HasOne("BusinessLogic.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessLogic.Notifications.Entities.Notification", b =>
                {
                    b.HasOne("BusinessLogic.Devices.Entities.OwnedDevice", "OwnedDevice")
                        .WithMany()
                        .HasForeignKey("OwnedDeviceHardwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessLogic.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("OwnedDevice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessLogic.Roles.Entities.SystemPermission", b =>
                {
                    b.HasOne("BusinessLogic.Roles.Entities.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleName");
                });

            modelBuilder.Entity("BusinessLogic.Users.Entities.User", b =>
                {
                    b.HasOne("BusinessLogic.Roles.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessLogic.HomeOwners.Entities.Home", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("BusinessLogic.HomeOwners.Entities.Member", b =>
                {
                    b.Navigation("HomePermissions");
                });

            modelBuilder.Entity("BusinessLogic.Roles.Entities.Role", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
