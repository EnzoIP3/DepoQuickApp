{
	"info": {
		"_postman_id": "741d408a-9025-49cb-871a-75c0b8715156",
		"name": "HomeConnect",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38878379",
		"_collection_link": "https://da2555.postman.co/workspace/DA2-Workspace~8cf1485f-f3fd-4817-8f6c-5e6bd112ccea/collection/38727942-741d408a-9025-49cb-871a-75c0b8715156?action=share&source=collection_link&creator=38878379"
	},
	"item": [
		{
			"name": "Unauthenticated",
			"item": [
				{
					"name": "POST /home_owners",
					"item": [
						{
							"name": "Email",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Email cannot be blank.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/home_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"home_owners"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Format - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Email format invalid.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"asd\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/home_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"home_owners"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Password",
							"item": [
								{
									"name": "No Capital Letter - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password must contain at least one capital letter.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"invalid\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/home_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"home_owners"
											]
										}
									},
									"response": []
								},
								{
									"name": "Less Than 8 Characters - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password must be at least 8 characters long.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"iN1@\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/home_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"home_owners"
											]
										}
									},
									"response": []
								},
								{
									"name": "No Digit - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password must contain at least one digit.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"invalidnodigiT@\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/home_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"home_owners"
											]
										}
									},
									"response": []
								},
								{
									"name": "No Special Character - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password must contain at least one special character.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"invalidnospEcialcharacter1\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/home_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"home_owners"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password cannot be blank.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/home_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"home_owners"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Profile Picture",
							"item": [
								{
									"name": "Invalid Format - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Profile picture must be a valid URL.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}!1M\",\r\n   \"profilePicture\": \"notavalid.url\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/home_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"home_owners"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Home owners must have a profile picture.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"password\": \"{{$randomPassword}}\",\r\n   \"surname\": \"{{$randomLastName}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/home_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"home_owners"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Name",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Name cannot be blank.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/home_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"home_owners"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Surname",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Surname cannot be blank.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/home_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"home_owners"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Valid Data - Should Return Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/home_owners",
									"host": [
										"{{url}}"
									],
									"path": [
										"home_owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Already Exists - Should Return 409 Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Conflict\");\r",
											"    pm.expect(jsonData.message).to.eql(\"User already exists.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"Nicolette98@hotmail.com\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/home_owners",
									"host": [
										"{{url}}"
									],
									"path": [
										"home_owners"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /auth",
					"item": [
						{
							"name": "Email",
							"item": [
								{
									"name": "Not Exists - Should Return 401 Unauthorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var token = pm.response.json().token;\r",
													"pm.environment.set(\"token\", token);\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid email or password.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"notexists@example.com\",\r\n    \"password\": \"{{$randomPassword}}1@M\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var token = pm.response.json().token;\r",
													"pm.environment.set(\"token\", token);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Email is required.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"password\": \"{{password}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Password",
							"item": [
								{
									"name": "Invalid - Should Return 401 Unauthorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var token = pm.response.json().token;\r",
													"pm.environment.set(\"token\", token);\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid email or password.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"admin@admin.com\",\r\n    \"password\": \"invalid\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var token = pm.response.json().token;\r",
													"pm.environment.set(\"token\", token);\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password is required.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{email}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/auth",
											"host": [
												"{{url}}"
											],
											"path": [
												"auth"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Valid Data - Should Return Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@admin.com\",\r\n    \"password\": \"Admin123@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Administrator",
			"item": [
				{
					"name": "Setup Tests",
					"item": [
						{
							"name": "Set Administrator Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"admin_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@admin.com\",\r\n    \"password\": \"Admin123@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Home Owner Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"home_owner_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Aniya32@gmail.com\",\r\n    \"password\": \"DKIeTrNY1smIFqf@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Business Owner Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"business_owner_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Brook86@yahoo.com\",\r\n    \"password\": \"zFwpkVpU0DPUdul@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /admins",
					"item": [
						{
							"name": "Email",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Email cannot be blank.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/admins",
											"host": [
												"{{url}}"
											],
											"path": [
												"admins"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Format - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Email format invalid.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"invalid@\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/admins",
											"host": [
												"{{url}}"
											],
											"path": [
												"admins"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Password",
							"item": [
								{
									"name": "No Capital Letter - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password must contain at least one capital letter.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"invalid\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/admins",
											"host": [
												"{{url}}"
											],
											"path": [
												"admins"
											]
										}
									},
									"response": []
								},
								{
									"name": "Less Than 8 Characters - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password must be at least 8 characters long.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"iN1@\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/admins",
											"host": [
												"{{url}}"
											],
											"path": [
												"admins"
											]
										}
									},
									"response": []
								},
								{
									"name": "No Digit - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password must contain at least one digit.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"invalidnodigiT@\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/admins",
											"host": [
												"{{url}}"
											],
											"path": [
												"admins"
											]
										}
									},
									"response": []
								},
								{
									"name": "No Special Character - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password must contain at least one special character.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"invalidnospEcialcharacter1\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/admins",
											"host": [
												"{{url}}"
											],
											"path": [
												"admins"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password cannot be blank.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"admiwn@admin.com\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/admins",
											"host": [
												"{{url}}"
											],
											"path": [
												"admins"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Name",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Name cannot be blank.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"admiwn@admin.com\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/admins",
											"host": [
												"{{url}}"
											],
											"path": [
												"admins"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Surname",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Surname cannot be blank.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"admiwn@admin.com\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/admins",
											"host": [
												"{{url}}"
											],
											"path": [
												"admins"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Valid Data - Should Return Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"surname\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}1M@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admins",
									"host": [
										"{{url}}"
									],
									"path": [
										"admins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Already Exists - Should Return 409 Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Conflict\");\r",
											"    pm.expect(jsonData.message).to.eql(\"User already exists.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"admin@admin.com\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admins",
									"host": [
										"{{url}}"
									],
									"path": [
										"admins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"admin@admin.com\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admins",
									"host": [
										"{{url}}"
									],
									"path": [
										"admins"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Permission - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: create-administrator\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"surname\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}1M@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admins",
									"host": [
										"{{url}}"
									],
									"path": [
										"admins"
									]
								}
							},
							"response": []
						},
						{
							"name": "{ } - Should Return 400 Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admins",
									"host": [
										"{{url}}"
									],
									"path": [
										"admins"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE /admins/{adminId}",
					"item": [
						{
							"name": "Valid Data - Should Return Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admins/09c1bf33-3f9f-4f05-b2fe-aadb2c2938ec",
									"host": [
										"{{url}}"
									],
									"path": [
										"admins",
										"09c1bf33-3f9f-4f05-b2fe-aadb2c2938ec"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not Exists - Should Return 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"NotFound\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Admin does not exist.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admins/{{$randomUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"admins",
										"{{$randomUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Format - Should Return 400 Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The id is not a valid GUID.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admins/invalid",
									"host": [
										"{{url}}"
									],
									"path": [
										"admins",
										"invalid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admins/{{$randomUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"admins",
										"{{$randomUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Permission - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: delete-administrator\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admins/{{$randomUUID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"admins",
										"{{$randomUUID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "POST /business_owners",
					"item": [
						{
							"name": "Email",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Email cannot be blank.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/business_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"business_owners"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Format - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Email format invalid.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"asd\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/business_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"business_owners"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Password",
							"item": [
								{
									"name": "No Capital Letter - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password must contain at least one capital letter.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"invalid\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/business_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"business_owners"
											]
										}
									},
									"response": []
								},
								{
									"name": "Less Than 8 Characters - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password must be at least 8 characters long.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"iN1@\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/business_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"business_owners"
											]
										}
									},
									"response": []
								},
								{
									"name": "No Digit - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password must contain at least one digit.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"invalidnodigiT@\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/business_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"business_owners"
											]
										}
									},
									"response": []
								},
								{
									"name": "No Special Character - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password must contain at least one special character.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"invalidnospEcialcharacter1\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/business_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"business_owners"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Password cannot be blank.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/business_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"business_owners"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Name",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Name cannot be blank.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/business_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"business_owners"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Surname",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Surname cannot be blank.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/business_owners",
											"host": [
												"{{url}}"
											],
											"path": [
												"business_owners"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Valid Data - Should Return Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"pm.environment.set(\"business_owner_email\", requestBody.email);\r",
											"pm.environment.set(\"business_owner_password\", requestBody.password);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/business_owners",
									"host": [
										"{{url}}"
									],
									"path": [
										"business_owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Already Exists - Should Return 409 Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Conflict\");\r",
											"    pm.expect(jsonData.message).to.eql(\"User already exists.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"Brook86@yahoo.com\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/business_owners",
									"host": [
										"{{url}}"
									],
									"path": [
										"business_owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"{{email}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/business_owners",
									"host": [
										"{{url}}"
									],
									"path": [
										"business_owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Permission - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: create-business-owner\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"{{email}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/business_owners",
									"host": [
										"{{url}}"
									],
									"path": [
										"business_owners"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /users",
					"item": [
						{
							"name": "Filters",
							"item": [
								{
									"name": "Full Name Filter - Should Return FIltered Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"users\");\r",
													"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.users.length).to.eql(1);\r",
													"    pm.expect(jsonData.users[0].name).to.eql(\"Administrator\");\r",
													"    pm.expect(jsonData.users[0].surname).to.eql(\"Account\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/users?fullName=Administrator Account",
											"host": [
												"{{url}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "fullName",
													"value": "Administrator Account"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Role Filter - Should Return Filtered Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"users\");\r",
													"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    jsonData.users.forEach(user => {\r",
													"        pm.expect(user.role).to.eql(\"Admin\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/users?role=Admin",
											"host": [
												"{{url}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "role",
													"value": "Admin"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Both Filters - Should Return FIltered Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"users\");\r",
													"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.users.length).to.eql(1);\r",
													"    pm.expect(jsonData.users[0].name).to.eql(\"Administrator\");\r",
													"    pm.expect(jsonData.users[0].surname).to.eql(\"Account\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/users?role=Admin&fullName=Administrator",
											"host": [
												"{{url}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "role",
													"value": "Admin"
												},
												{
													"key": "fullName",
													"value": "Administrator"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Pagination",
							"item": [
								{
									"name": "Pagination - Should Return Paginated Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"users\");\r",
													"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.pagination.page).to.eql(1);\r",
													"    pm.expect(jsonData.pagination.pageSize).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/users?pageSize=1&currentPage=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "pageSize",
													"value": "1"
												},
												{
													"key": "currentPage",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "No Filters Or Pagination - Should Return Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"users\");\r",
											"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
											"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
											"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
											"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
											"    jsonData.users.forEach(function(user) {\r",
											"        pm.expect(user).to.have.property(\"id\");\r",
											"        pm.expect(user).to.have.property(\"name\");\r",
											"        pm.expect(user).to.have.property(\"surname\");\r",
											"        pm.expect(user).to.have.property(\"role\");\r",
											"        pm.expect(user).to.have.property(\"createdAt\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Permission - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: get-all-users\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /businesses",
					"item": [
						{
							"name": "Filters",
							"item": [
								{
									"name": "Name Filter - Should Return Filtered Businesses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"businesses\");\r",
													"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    \r",
													"    jsonData.businesses.forEach(function(business) {\r",
													"        pm.expect(business.name).to.include(\"Business\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/businesses?name=Business",
											"host": [
												"{{url}}"
											],
											"path": [
												"businesses"
											],
											"query": [
												{
													"key": "name",
													"value": "Business"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Owner Name Filter - Should Return Filtered Businesses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"businesses\");\r",
													"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    jsonData.businesses.forEach(function (business) {\r",
													"        const nameContainsMaryse = business.ownerName.includes(\"Maryse\");\r",
													"        const surnameContainsMaryse = business.ownerSurname.includes(\"Maryse\");\r",
													"        pm.expect(nameContainsMaryse || surnameContainsMaryse).to.be.true;\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/businesses?ownerName=Maryse",
											"host": [
												"{{url}}"
											],
											"path": [
												"businesses"
											],
											"query": [
												{
													"key": "ownerName",
													"value": "Maryse"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Pagination",
							"item": [
								{
									"name": "Pagination - Should Return Paginated Businesses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"businesses\");\r",
													"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.pagination.page).to.eql(1);\r",
													"    pm.expect(jsonData.pagination.pageSize).to.eql(1);\r",
													"    pm.expect(jsonData.businesses.length).to.eql(1);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/businesses?page=1&pageSize=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"businesses"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "No Filters Or Pagination - Should Return Businesses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"businesses\");\r",
											"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
											"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
											"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
											"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
											"    jsonData.businesses.forEach(function(business) {\r",
											"        pm.expect(business).to.have.property(\"name\");\r",
											"        pm.expect(business).to.have.property(\"ownerName\");\r",
											"        pm.expect(business).to.have.property(\"ownerSurname\");\r",
											"        pm.expect(business).to.have.property(\"ownerEmail\");\r",
											"        pm.expect(business).to.have.property(\"rut\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/businesses",
									"host": [
										"{{url}}"
									],
									"path": [
										"businesses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/businesses",
									"host": [
										"{{url}}"
									],
									"path": [
										"businesses"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Permission - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: get-all-businesses\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/businesses",
									"host": [
										"{{url}}"
									],
									"path": [
										"businesses"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{admin_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Business Owner",
			"item": [
				{
					"name": "Setup Tests",
					"item": [
						{
							"name": "Set Administrator Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"admin_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@admin.com\",\r\n    \"password\": \"Admin123@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Business Owner Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"business_owner_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Brook86@yahoo.com\",\r\n    \"password\": \"zFwpkVpU0DPUdul@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Business Owner Token 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"business_owner_token_2\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Rudy6@yahoo.com\",\r\n    \"password\": \"LicEA5lo1kCWSW5@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Business Owner Token 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"business_owner_token_3\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Domenic_Cronin@hotmail.com\",\r\n    \"password\": \"H1JB_J0n0HXHNO3@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /businesses",
					"item": [
						{
							"name": "Name",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Name must not be blank\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{business_owner_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"logo\": \"{{$randomImageUrl}}\",\r\n   \"rut\": \"{{$randomUUID}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/businesses",
											"host": [
												"{{url}}"
											],
											"path": [
												"businesses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Logo",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Logo must not be blank\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{business_owner_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"rut\": \"{{$randomUUID}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/businesses",
											"host": [
												"{{url}}"
											],
											"path": [
												"businesses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Format - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Logo must be a valid URI\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{business_owner_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"rut\": \"{{$randomUUID}}\",\r\n   \"logo\": \"not-an-url\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/businesses",
											"host": [
												"{{url}}"
											],
											"path": [
												"businesses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Rut",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Rut must not be blank\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{business_owner_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"logo\": \"{{$randomImageUrl}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/businesses",
											"host": [
												"{{url}}"
											],
											"path": [
												"businesses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "{ } - Should Return 400 Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/businesses",
									"host": [
										"{{url}}"
									],
									"path": [
										"businesses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid Data - Should Return Rut",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"rut\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"logo\": \"{{$randomImageUrl}}\",\r\n   \"rut\": \"{{$randomUUID}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/businesses",
									"host": [
										"{{url}}"
									],
									"path": [
										"businesses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Already Owns a Business - Should Return 409 Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Conflict\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Owner already has a business.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"logo\": \"{{$randomImageUrl}}\",\r\n   \"rut\": \"{{$randomUUID}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/businesses",
									"host": [
										"{{url}}"
									],
									"path": [
										"businesses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"logo\": \"{{$randomImageUrl}}\",\r\n   \"rut\": \"{{$randomUUID}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/businesses",
									"host": [
										"{{url}}"
									],
									"path": [
										"businesses"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Permission - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: create-business\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"logo\": \"{{$randomImageUrl}}\",\r\n   \"rut\": \"{{$randomUUID}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/businesses",
									"host": [
										"{{url}}"
									],
									"path": [
										"businesses"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /cameras",
					"item": [
						{
							"name": "Name",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Name is missing\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Model Number",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Model number is missing\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras"
											]
										}
									},
									"response": []
								},
								{
									"name": "Already Exists - Should Return 409 Conflict",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"Conflict\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Device already exists\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": 1,\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Interior",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Is interior must be provided\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Exterior",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Is interior must be provided\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Description",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Description is missing\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Person Detection",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Person detection must be provided\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"motionDetection\": false,\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Motion Detection",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Motion detection must be provided\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"personDetection\": false,\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main Photo",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"MainPhoto is missing\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Format - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.contain(\"is not a valid image URL\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"mainPhoto\": \"not an url\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Secondary Photos",
							"item": [
								{
									"name": "Missing - Should Return Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Format - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.contain(\"is not a valid image URL\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"this is invalid\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Valid Data - Should Return Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/cameras",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Business - Should Return Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
											"    pm.expect(jsonData.message).to.eql(\"That business does not exist.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token_3}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/cameras",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/cameras",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Permission - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: create-camera\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/cameras",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /sensors",
					"item": [
						{
							"name": "Name",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Name is missing\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/sensors",
											"host": [
												"{{url}}"
											],
											"path": [
												"sensors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Model Number",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Model number is missing\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/sensors",
											"host": [
												"{{url}}"
											],
											"path": [
												"sensors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Already Exists - Should Return 409 Conflict",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"Conflict\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Device already exists\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": 1,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/sensors",
											"host": [
												"{{url}}"
											],
											"path": [
												"sensors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Description",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Description is missing\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/sensors",
											"host": [
												"{{url}}"
											],
											"path": [
												"sensors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main Photo",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"MainPhoto is missing\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/sensors",
											"host": [
												"{{url}}"
											],
											"path": [
												"sensors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Format - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.contain(\"is not a valid image URL\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"not valid\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/sensors",
											"host": [
												"{{url}}"
											],
											"path": [
												"sensors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Secondary Photos",
							"item": [
								{
									"name": "Missing - Should Return Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/sensors",
											"host": [
												"{{url}}"
											],
											"path": [
												"sensors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Format - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.contain(\"is not a valid image URL\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"not valid\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/sensors",
											"host": [
												"{{url}}"
											],
											"path": [
												"sensors"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Valid Data - Should Return Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/sensors",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Business - Should Return Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
											"    pm.expect(jsonData.message).to.eql(\"That business does not exist.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token_3}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/sensors",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/sensors",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Permission - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: create-sensor\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"modelNumber\": {{$randomInt}},\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/sensors",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{business_owner_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authenticated",
			"item": [
				{
					"name": "Setup Tests",
					"item": [
						{
							"name": "Set Home Owner Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"home_owner_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Lera.Sawayn@yahoo.com\",\r\n    \"password\": \"bmHl51OKuyMOGKc@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Administrator Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"admin_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@admin.com\",\r\n    \"password\": \"Admin123@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Business Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"pm.environment.set(\"business_owner_email\", requestBody.email);\r",
											"pm.environment.set(\"business_owner_password\", requestBody.password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/business_owners",
									"host": [
										"{{url}}"
									],
									"path": [
										"business_owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Business Owner Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"business_owner_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Myrna.Breitenberg@gmail.com\",\r\n    \"password\": \"6b1aNyyfrAShxVN@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /devices",
					"item": [
						{
							"name": "Filters",
							"item": [
								{
									"name": "Name Filter - Should Return Filtered Devices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"devices\");\r",
													"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    \r",
													"    jsonData.devices.forEach(function(device) {\r",
													"        pm.expect(device.name).to.include(\"Test\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/devices?name=Test",
											"host": [
												"{{url}}"
											],
											"path": [
												"devices"
											],
											"query": [
												{
													"key": "name",
													"value": "Test"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Type Filter - Should Return Filtered Devices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"devices\");\r",
													"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    \r",
													"    jsonData.devices.forEach(function(device) {\r",
													"        pm.expect(device.type).to.include(\"Camera\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/devices?type=Camera",
											"host": [
												"{{url}}"
											],
											"path": [
												"devices"
											],
											"query": [
												{
													"key": "type",
													"value": "Camera"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Model - Should Return Filtered Devices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"devices\");\r",
													"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    \r",
													"    jsonData.devices.forEach(function(device) {\r",
													"        pm.expect(device.modelNumber).to.eql(1000);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/devices?model=1000",
											"host": [
												"{{url}}"
											],
											"path": [
												"devices"
											],
											"query": [
												{
													"key": "model",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Business Name Filter - Should Return Filtered Devices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"devices\");\r",
													"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    \r",
													"    jsonData.devices.forEach(function(device) {\r",
													"        pm.expect(device.businessName).to.include(\"Business\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/devices?businessName=Business",
											"host": [
												"{{url}}"
											],
											"path": [
												"devices"
											],
											"query": [
												{
													"key": "businessName",
													"value": "Business"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Pagination",
							"item": [
								{
									"name": "Pagination - Should Return Paginated Devices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"devices\");\r",
													"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
													"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.pagination.page).to.eql(1);\r",
													"    pm.expect(jsonData.pagination.pageSize).to.eql(1);\r",
													"    pm.expect(jsonData.devices.length).to.eql(1);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/devices?pageSize=1&page=1",
											"host": [
												"{{url}}"
											],
											"path": [
												"devices"
											],
											"query": [
												{
													"key": "pageSize",
													"value": "1"
												},
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "No Filter Or Pagination - Should Return Devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"devices\");\r",
											"    pm.expect(jsonData).to.have.property(\"pagination\");\r",
											"    pm.expect(jsonData.pagination).to.have.property(\"page\");\r",
											"    pm.expect(jsonData.pagination).to.have.property(\"pageSize\");\r",
											"    pm.expect(jsonData.pagination).to.have.property(\"totalPages\");\r",
											"    jsonData.devices.forEach(function(device) {\r",
											"        pm.expect(device).to.have.property(\"hardwareId\");\r",
											"        pm.expect(device).to.have.property(\"name\");\r",
											"        pm.expect(device).to.have.property(\"businessName\");\r",
											"        pm.expect(device).to.have.property(\"type\");\r",
											"        pm.expect(device).to.have.property(\"modelNumber\");\r",
											"        pm.expect(device).to.have.property(\"photo\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"devices"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /device_types",
					"item": [
						{
							"name": "Get - Should Return Device Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.deviceTypes).to.eql([\"Sensor\", \"Camera\"]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/device_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"device_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/device_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"device_types"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{home_owner_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Home Owner",
			"item": [
				{
					"name": "Setup Tests",
					"item": [
						{
							"name": "Set Home Owner Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"home_owner_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Sofia99@hotmail.com\",\r\n    \"password\": \"IN6Q_tsq1gpO67F@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Home Owner Token 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"home_owner_token_2\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Marcella.Predovic@hotmail.com\",\r\n    \"password\": \"NUZVa44O192AfUH@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Home Owner Token 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"home_owner_token_3\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Carlie_Schneider91@gmail.com\",\r\n    \"password\": \"8TF1FF9nf5HwmcL@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Home Owner Token 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"home_owner_token_4\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Carmel_Klein37@hotmail.com\",\r\n    \"password\": \"1EOmgbBHHQR8wr6@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Administrator Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"admin_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@admin.com\",\r\n    \"password\": \"Admin123@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Business Owner Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"business_owner_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Nikki_Fritsch@hotmail.com\",\r\n    \"password\": \"HcNK8e_GL9Ne_wU@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /homes",
					"item": [
						{
							"name": "Address",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"All arguments are required.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"latitude\": -90,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Latitude",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Latitude is required.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Over 90 - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Latitude must be between -90 and 90.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": 90.01,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Under -90 - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Latitude must be between -90 and 90.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": -90.01,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Longitude",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Longitude is required.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": -90,\r\n    \"maxMembers\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Over 180 - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Longitude must be between -180 and 180.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": 90,\r\n    \"longitude\": 181,\r\n    \"maxMembers\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Under -180 - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Longitude must be between -180 and 180.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": 90,\r\n    \"longitude\": -180.01,\r\n    \"maxMembers\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Max Members",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"All arguments are required.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"latitude\": -90,\r\n    \"longitude\": 90\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Zero - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Max members must be at least 1.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": -90,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Negative - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Max members must be at least 1.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": -90,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": -1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Valid Data - Should Return Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var id = pm.response.json().id;\r",
											"pm.environment.set(\"home_id\", id);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{$randomStreetName}} 123\",\r\n    \"latitude\": -90,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Already Exists - Should Return 409 Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Conflict\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Address is already in use.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"$Hickle Roads 123\",\r\n    \"latitude\": -90,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": -90,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Permission - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: create-home\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": -90,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /homes/{homesId}/members",
					"item": [
						{
							"name": "Member Id",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"All arguments are required.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes/{{home_id}}/members",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes",
												"{{home_id}}",
												"members"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Format - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Member ID must be a valid GUID.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"memberId\": \"not a guid\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes/{{home_id}}/members",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes",
												"{{home_id}}",
												"members"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Exists - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"User does not exist.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"memberId\": \"{{$randomUUID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes/{{home_id}}/members",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes",
												"{{home_id}}",
												"members"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Already Exists Member - Should Return 409 Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Conflict\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The member is already added to the home.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"memberId\": \"f2420d77-2cdd-4707-8a2d-0dfda3ee050f\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/DDD31FAE-CB69-411E-AAC2-833681AFCEAF/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"DDD31FAE-CB69-411E-AAC2-833681AFCEAF",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid Data - Should Return Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var memberId = pm.response.json().memberId;\r",
											"pm.environment.set(\"member_id\", memberId);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"homeId\");\r",
											"    pm.expect(jsonData).to.have.property(\"memberId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"memberId\": \"04353CE9-7C9F-40E0-A0D5-647171012445\",\r\n    \"canAddDevices\": true,\r\n    \"canListDevices\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Home Is Full - Should Return 409 Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Conflict\");\r",
											"    pm.expect(jsonData.message).to.eql(\"This home is already full.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"memberId\": \"CE1C7714-0E85-415C-BC19-4BCE4BDF1428\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not Exists Home - Should Return 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"NotFound\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The home does not exist\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"memberId\": \"{{home_owner_2_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/8465c5a1-709e-4643-8a48-de7586562c25\n/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"8465c5a1-709e-4643-8a48-de7586562c25\n",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": -90,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not A Home Owner - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: add-member\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": -90,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Permission - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing home permission: add-members\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": -90,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not A Member - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing home permission: add-members\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_3}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"${{$randomStreetName}} 123\",\r\n    \"latitude\": -90,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "{ } - Should Return 400 Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
											"    pm.expect(jsonData.message).to.eql(\"All arguments are required.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /homes/{homesId}/devices",
					"item": [
						{
							"name": "Device Ids",
							"item": [
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"At least one device must be added to the home.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes/{{home_id}}/devices",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes",
												"{{home_id}}",
												"devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Type - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"deviceIds\": [1]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes/{{home_id}}/devices",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes",
												"{{home_id}}",
												"devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"At least one device must be added to the home.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"deviceIds\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes/{{home_id}}/devices",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes",
												"{{home_id}}",
												"devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Single Invalid GUID - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Device ID must be a valid GUID.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"deviceIds\": [\"not-a-guid\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes/{{home_id}}/devices",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes",
												"{{home_id}}",
												"devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Single Not Existing ID - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Device does not exist\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"deviceIds\": [\"{{$randomUUID}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes/{{home_id}}/devices",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes",
												"{{home_id}}",
												"devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "One Invalid GUID - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Device ID must be a valid GUID.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"deviceIds\": [\"1BE661F6-37B4-4635-8DA0-007374657850\", \"not-a-guid\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes/{{home_id}}/devices",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes",
												"{{home_id}}",
												"devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "One Not Existing ID - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.contain(\"Device does not exist\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"deviceIds\": [\"1BE661F6-37B4-4635-8DA0-007374657850\", \"{{$randomUUID}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/homes/{{home_id}}/devices",
											"host": [
												"{{url}}"
											],
											"path": [
												"homes",
												"{{home_id}}",
												"devices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Owner - Should Return Ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"homeId\");\r",
											"    pm.expect(jsonData).to.have.property(\"deviceIds\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"deviceIds\": [\"1BE661F6-37B4-4635-8DA0-007374657850\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Member with Permission - Should Return Ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"homeId\");\r",
											"    pm.expect(jsonData).to.have.property(\"deviceIds\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"deviceIds\": [\"6CC6C843-07B8-49E6-811A-5517DFE875C6\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not A Home Owner - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: add-device\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"deviceIds\": [\"6CC6C843-07B8-49E6-811A-5517DFE875C6\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Permission - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing home permission: add-devices\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_3}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"deviceIds\": [\"6CC6C843-07B8-49E6-811A-5517DFE875C6\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not A Member - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing home permission: add-devices\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_3}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"deviceIds\": [\"6CC6C843-07B8-49E6-811A-5517DFE875C6\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not Exists Home - Should Return 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"NotFound\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The home does not exist\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"deviceIds\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/8465c5a1-709e-4643-8a48-de7586562c25\n/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"8465c5a1-709e-4643-8a48-de7586562c25\n",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"deviceIds\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "{ } - Should Return 400 Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
											"    pm.expect(jsonData.message).to.eql(\"At least one device must be added to the home.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /homes/{homesId}/members",
					"item": [
						{
							"name": "Owner - Should Return Members",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"members\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Member - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing home permission: get-members\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not A Member - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing home permission: get-members\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_3}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not A Home Owner - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: get-members\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not Exists Home - Should Return 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"NotFound\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The home does not exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/5c858266-5f40-493e-0000-bc560d979775/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"5c858266-5f40-493e-0000-bc560d979775",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /homes/{homesId}/devices",
					"item": [
						{
							"name": "Owner - Should Return Devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"devices\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Member With Permission - Should Return Devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"devices\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_4}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/DDD31FAE-CB69-411E-AAC2-833681AFCEAF/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"DDD31FAE-CB69-411E-AAC2-833681AFCEAF",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Member Without Permission - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing home permission: get-devices\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not A Member - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing home permission: get-devices\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_3}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not A Home Owner - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: get-members\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not Exists Home - Should Return 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"NotFound\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The home does not exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/0b620c08-0000-433b-8747-402d04b3f573/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"0b620c08-0000-433b-8747-402d04b3f573",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH /members/{memberId}/notifications",
					"item": [
						{
							"name": "Owner - Should Return Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"memberId\");\r",
											"    pm.expect(jsonData).to.have.property(\"shouldBeNotified\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"shouldBeNotified\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/members/{{member_id}}/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"members",
										"{{member_id}}",
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not Exists Member - Should Return 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"NotFound\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The member does not exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"shouldBeNotified\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/members/86cc4d15-ac6e-4c49-0000-0ab346f51ddf/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"members",
										"86cc4d15-ac6e-4c49-0000-0ab346f51ddf",
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Member - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing home permission: update-notifications\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"shouldBeNotified\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/members/{{member_id}}/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"members",
										"{{member_id}}",
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not A Home Owner - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: update-member\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"shouldBeNotified\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/members/aced7ccd-d4d5-4891-a076-37da37bf6e06/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"members",
										"aced7ccd-d4d5-4891-a076-37da37bf6e06",
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"shouldBeNotified\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/members/{{member_id}}/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"members",
										"{{member_id}}",
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "{ } - Should Return Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
											"    pm.expect(jsonData.message).to.eql(\"ShouldBeNotified must be provided.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/members/{{member_id}}/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"members",
										"{{member_id}}",
										"notifications"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{home_owner_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Devices",
			"item": [
				{
					"name": "Setup Tests",
					"item": [
						{
							"name": "Set Home Owner Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"home_owner_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Greyson.Lubowitz@hotmail.com\",\r\n    \"password\": \"DFJ7hytujSdRhCQ@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Administrator Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"admin_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@admin.com\",\r\n    \"password\": \"Admin123@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Business Owner Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"business_owner_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Brook86@yahoo.com\",\r\n    \"password\": \"zFwpkVpU0DPUdul@1Mm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /sensors/{hardwareId}/toggle",
					"item": [
						{
							"name": "Sets To False - Should Return Connected and Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"connected\");\r",
											"    pm.expect(jsonData).to.have.property(\"hardwareId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.connected).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/sensors/b28fc9c9-ae95-47ae-a7b9-1c1eaa63580a/toggle",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors",
										"b28fc9c9-ae95-47ae-a7b9-1c1eaa63580a",
										"toggle"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sets To True - Should Return Connected and Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"connected\");\r",
											"    pm.expect(jsonData).to.have.property(\"hardwareId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.connected).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/sensors/b28fc9c9-ae95-47ae-a7b9-1c1eaa63580a/toggle",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors",
										"b28fc9c9-ae95-47ae-a7b9-1c1eaa63580a",
										"toggle"
									]
								}
							},
							"response": []
						},
						{
							"name": "Device Not Registered - Should Return 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"NotFound\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The device is not registered in this home.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/sensors/8465c5a1-709e-4643-8a48-de7586562c25/toggle",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors",
										"8465c5a1-709e-4643-8a48-de7586562c25",
										"toggle"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /sensors/{hardwareId}/open",
					"item": [
						{
							"name": "Valid Data - Should Return  HardwareId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"hardwareId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/sensors/b28fc9c9-ae95-47ae-a7b9-1c1eaa63580a/open",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors",
										"b28fc9c9-ae95-47ae-a7b9-1c1eaa63580a",
										"open"
									]
								}
							},
							"response": []
						},
						{
							"name": "Device Not Connected - Should Return 400 Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Device is not connected\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/sensors/094cb68b-1440-4bc4-9a62-648a42882e60/open",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors",
										"094cb68b-1440-4bc4-9a62-648a42882e60",
										"open"
									]
								}
							},
							"response": []
						},
						{
							"name": "Device Not Registered - Should Return 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"NotFound\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The device is not registered in this home.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/sensors/8465c5a1-709e-4643-8a48-de7586562c25/open",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors",
										"8465c5a1-709e-4643-8a48-de7586562c25",
										"open"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /sensors/{hardwareId}/close",
					"item": [
						{
							"name": "Valid Data - Should Return  HardwareId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"hardwareId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/sensors/b28fc9c9-ae95-47ae-a7b9-1c1eaa63580a/close",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors",
										"b28fc9c9-ae95-47ae-a7b9-1c1eaa63580a",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Device Not Connected - Should Return 400 Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Device is not connected\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/sensors/094cb68b-1440-4bc4-9a62-648a42882e60/close",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors",
										"094cb68b-1440-4bc4-9a62-648a42882e60",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Device Not Registered - Should Return 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"NotFound\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The device is not registered in this home.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/sensors/8465c5a1-709e-4643-8a48-de7586562c25/close",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors",
										"8465c5a1-709e-4643-8a48-de7586562c25",
										"close"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /cameras/{hardwareId}/toggle",
					"item": [
						{
							"name": "Sets To False - Should Return Connected and HardwareId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"connected\");\r",
											"    pm.expect(jsonData).to.have.property(\"hardwareId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.connected).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/cameras/2c1b9595-d365-4d96-b622-45000e3ad1e9/toggle",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras",
										"2c1b9595-d365-4d96-b622-45000e3ad1e9",
										"toggle"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sets To True - Should Return Connected and HardwareId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"connected\");\r",
											"    pm.expect(jsonData).to.have.property(\"hardwareId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.connected).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/cameras/2c1b9595-d365-4d96-b622-45000e3ad1e9/toggle",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras",
										"2c1b9595-d365-4d96-b622-45000e3ad1e9",
										"toggle"
									]
								}
							},
							"response": []
						},
						{
							"name": "Device Not Registered - Should Return 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"NotFound\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The device is not registered in this home.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/cameras/8465c5a1-709e-4643-8a48-de7586562c25/toggle",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras",
										"8465c5a1-709e-4643-8a48-de7586562c25",
										"toggle"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /cameras/{hardwareId}/movement-detected",
					"item": [
						{
							"name": "Valid Data - Should Return HardwareId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"hardwareId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/cameras/2c1b9595-d365-4d96-b622-45000e3ad1e9/movement-detected",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras",
										"2c1b9595-d365-4d96-b622-45000e3ad1e9",
										"movement-detected"
									]
								}
							},
							"response": []
						},
						{
							"name": "Device Not Connected - Should Return 400 Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Device is not connected\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/cameras/6bbc951c-3b4c-45ed-86a9-1d7722ec5ee1/movement-detected",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras",
										"6bbc951c-3b4c-45ed-86a9-1d7722ec5ee1",
										"movement-detected"
									]
								}
							},
							"response": []
						},
						{
							"name": "Device Not Registered - Should Return 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"NotFound\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The device is not registered in this home.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/cameras/8465c5a1-709e-4643-8a48-de7586562c25/movement-detected",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras",
										"8465c5a1-709e-4643-8a48-de7586562c25",
										"movement-detected"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /cameras/{hardwareId}/person-detected",
					"item": [
						{
							"name": "UserId",
							"item": [
								{
									"name": "Not Exists User - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"User detected by camera is not found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userId\": \"{{$randomUUID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras/2c1b9595-d365-4d96-b622-45000e3ad1e9/person-detected",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras",
												"2c1b9595-d365-4d96-b622-45000e3ad1e9",
												"person-detected"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Format - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"User detected by camera is not found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userId\": \"not-a-guid\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras/2c1b9595-d365-4d96-b622-45000e3ad1e9/person-detected",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras",
												"2c1b9595-d365-4d96-b622-45000e3ad1e9",
												"person-detected"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing - Should Return 400 Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
													"    pm.expect(jsonData.message).to.eql(\"User detected by camera is not found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/cameras/2c1b9595-d365-4d96-b622-45000e3ad1e9/person-detected",
											"host": [
												"{{url}}"
											],
											"path": [
												"cameras",
												"2c1b9595-d365-4d96-b622-45000e3ad1e9",
												"person-detected"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Valid Data - Should Return HardwareId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"hardwareId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"04353CE9-7C9F-40E0-A0D5-647171012445\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/cameras/2c1b9595-d365-4d96-b622-45000e3ad1e9/person-detected",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras",
										"2c1b9595-d365-4d96-b622-45000e3ad1e9",
										"person-detected"
									]
								}
							},
							"response": []
						},
						{
							"name": "Device Not Connected - Should Return 400 Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Device is not connected\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{home_owner_2_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/cameras/6bbc951c-3b4c-45ed-86a9-1d7722ec5ee1/person-detected",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras",
										"6bbc951c-3b4c-45ed-86a9-1d7722ec5ee1",
										"person-detected"
									]
								}
							},
							"response": []
						},
						{
							"name": "Device Not Registered - Should Return 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"NotFound\");\r",
											"    pm.expect(jsonData.message).to.eql(\"The device is not registered in this home.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{home_owner_2_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/cameras/8465c5a1-709e-4643-8a48-de7586562c25/person-detected",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras",
										"8465c5a1-709e-4643-8a48-de7586562c25",
										"person-detected"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Setup Tests",
					"item": [
						{
							"name": "Register Home Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var req = JSON.parse(pm.request.body.raw);\r",
											"pm.environment.set(\"home_owner_email\", req.email);\r",
											"pm.environment.set(\"home_owner_password\", req.password);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/home_owners",
									"host": [
										"{{url}}"
									],
									"path": [
										"home_owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Home Owner 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var req = JSON.parse(pm.request.body.raw);\r",
											"pm.environment.set(\"home_owner_email_2\", req.email);\r",
											"pm.environment.set(\"home_owner_password_2\", req.password);\r",
											"\r",
											"var id = pm.response.json().id;\r",
											"pm.environment.set(\"home_owner_2_id\", id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/home_owners",
									"host": [
										"{{url}}"
									],
									"path": [
										"home_owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Home Owner 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var req = JSON.parse(pm.request.body.raw);\r",
											"pm.environment.set(\"home_owner_email_3\", req.email);\r",
											"pm.environment.set(\"home_owner_password_3\", req.password);\r",
											"\r",
											"var id = pm.response.json().id;\r",
											"pm.environment.set(\"home_owner_3_id\", id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\",\r\n   \"profilePicture\": \"{{$randomUrl}}/asd.png\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/home_owners",
									"host": [
										"{{url}}"
									],
									"path": [
										"home_owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Home Owner Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"home_owner_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{home_owner_email}}\",\r\n    \"password\": \"{{home_owner_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Home Owner Token 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"home_owner_token_2\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{home_owner_email_2}}\",\r\n    \"password\": \"{{home_owner_password_2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Home Owner Token 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"home_owner_token_3\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{home_owner_email_3}}\",\r\n    \"password\": \"{{home_owner_password_3}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Home",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var id = pm.response.json().id;\r",
											"pm.environment.set(\"home_id\", id);\r",
											"\r",
											"var req = JSON.parse(pm.request.body.raw);\r",
											"pm.environment.set(\"home_address\", req.address);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"{{$randomStreetName}} 123\",\r\n    \"latitude\": -90,\r\n    \"longitude\": 90,\r\n    \"maxMembers\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Administrator Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"admin_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@admin.com\",\r\n    \"password\": \"Admin123@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Business Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var requestBody = JSON.parse(pm.request.body.raw);\r",
											"pm.environment.set(\"business_owner_email\", requestBody.email);\r",
											"pm.environment.set(\"business_owner_password\", requestBody.password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"name\": \"{{$randomFirstName}}\",\r\n   \"surname\": \"{{$randomLastName}}\",\r\n   \"password\": \"{{$randomPassword}}@1Mm\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/business_owners",
									"host": [
										"{{url}}"
									],
									"path": [
										"business_owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Business Owner Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().token;\r",
											"pm.environment.set(\"business_owner_token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{business_owner_email}}\",\r\n    \"password\": \"{{business_owner_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Business",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\": \"Business\",\r\n   \"logo\": \"https://example.com/image.png\",\r\n   \"rut\": \"{{$randomUUID}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/businesses",
									"host": [
										"{{url}}"
									],
									"path": [
										"businesses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Camera",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var id = pm.response.json().id;\r",
											"pm.environment.set(\"device_id\", id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test\",\r\n    \"modelNumber\": 6000,\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/cameras",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Camera",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"deviceIds\": [\"{{device_id}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Camera Hardware Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"let hardwareId = null;\r",
											"\r",
											"response.devices.forEach(function(device) {\r",
											"    if (device.type === \"Camera\" && hardwareId === null) {\r",
											"        hardwareId = device.hardwareId;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.environment.set(\"camera_hardwareId\", hardwareId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Sensor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var id = pm.response.json().id;\r",
											"pm.environment.set(\"device_id_2\", id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test\",\r\n    \"modelNumber\": 7000,\r\n    \"interior\": true,\r\n    \"exterior\": false,\r\n    \"description\": \"{{$randomCatchPhrase}}\",\r\n    \"personDetection\": false,\r\n    \"motionDetection\": false,\r\n    \"mainPhoto\": \"{{$randomImageUrl}}\",\r\n    \"secondaryPhotos\": [\"{{$randomImageUrl}}\", \"{{$randomImageUrl}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/sensors",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Sensor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"deviceIds\": [\"{{device_id_2}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Sensor Hardware Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"let hardwareId = null;\r",
											"\r",
											"response.devices.forEach(function(device) {\r",
											"    if (device.type === \"Sensor\" && hardwareId === null) {\r",
											"        hardwareId = device.hardwareId;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.environment.set(\"sensor_hardwareId\", hardwareId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/devices",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Home Owner 2 To Home",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var member_id = pm.response.json().memberId;\r",
											"pm.environment.set(\"member_id\", member_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"memberId\": \"{{home_owner_2_id}}\",\r\n    \"canAddDevices\": true,\r\n    \"canListDevices\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Home Owner 2 Should Be Notified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"memberId\");\r",
											"    pm.expect(jsonData).to.have.property(\"shouldBeNotified\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"shouldBeNotified\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/members/{{member_id}}/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"members",
										"{{member_id}}",
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Home Owner 3 To Home",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var member_id = pm.response.json().memberId;\r",
											"pm.environment.set(\"member_id\", member_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"memberId\": \"{{home_owner_3_id}}\",\r\n    \"canAddDevices\": true,\r\n    \"canListDevices\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/homes/{{home_id}}/members",
									"host": [
										"{{url}}"
									],
									"path": [
										"homes",
										"{{home_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open Sensor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"hardwareId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/sensors/{{sensor_hardwareId}}/open",
									"host": [
										"{{url}}"
									],
									"path": [
										"sensors",
										"{{sensor_hardwareId}}",
										"open"
									]
								}
							},
							"response": []
						},
						{
							"name": "Camera Detected Person",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"hardwareId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{home_owner_3_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/cameras/{{camera_hardwareId}}/person-detected",
									"host": [
										"{{url}}"
									],
									"path": [
										"cameras",
										"{{camera_hardwareId}}",
										"person-detected"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /notifications",
					"item": [
						{
							"name": "Filters",
							"item": [
								{
									"name": "Read",
									"item": [
										{
											"name": "Read Filter - Should Return Filtered Notifications",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct structure\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(\"notifications\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.notifications.length).to.eql(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{home_owner_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/notifications?read=true",
													"host": [
														"{{url}}"
													],
													"path": [
														"notifications"
													],
													"query": [
														{
															"key": "read",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Read Filter - Should Return 400 Bad Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{home_owner_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/notifications?read=aaaa",
													"host": [
														"{{url}}"
													],
													"path": [
														"notifications"
													],
													"query": [
														{
															"key": "read",
															"value": "aaaa"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Date",
									"item": [
										{
											"name": "Date Filter - Should Return Filtered Notifications",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct structure\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(\"notifications\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.notifications.length).to.eql(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{home_owner_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/notifications?dateCreated=07-10-2024",
													"host": [
														"{{url}}"
													],
													"path": [
														"notifications"
													],
													"query": [
														{
															"key": "dateCreated",
															"value": "07-10-2024"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Date Filter - Should Return 400 Bad Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct structure\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
															"    pm.expect(jsonData.message).to.eql(\"The date created filter is invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{home_owner_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/notifications?dateCreated=not dd/mm/yyyy",
													"host": [
														"{{url}}"
													],
													"path": [
														"notifications"
													],
													"query": [
														{
															"key": "dateCreated",
															"value": "not dd/mm/yyyy"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Device",
									"item": [
										{
											"name": "Device Filter - Should Return Filtered Notifications",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct structure\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(\"notifications\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.notifications.length).to.eql(1);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{home_owner_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/notifications?device=Camera",
													"host": [
														"{{url}}"
													],
													"path": [
														"notifications"
													],
													"query": [
														{
															"key": "device",
															"value": "Camera"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Device Filter - Should Return 400 Bad Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct structure\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.innerCode).to.eql(\"BadRequest\");\r",
															"    pm.expect(jsonData.message).to.eql(\"The device filter is not valid.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{home_owner_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/notifications?device=bl",
													"host": [
														"{{url}}"
													],
													"path": [
														"notifications"
													],
													"query": [
														{
															"key": "device",
															"value": "bl"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Owner - Should Return Notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"notifications\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.notifications.length).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Member That Should Be Notified - Should Return Notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"notifications\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.notifications.length).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Member That Should Not Be Notified - Should Return Empty Notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"notifications\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.notifications.length).to.eql(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{home_owner_token_3}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated - Should Return 401 Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Unauthorized\");\r",
											"    pm.expect(jsonData.message).to.eql(\"You are not authenticated\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not A Home Owner - Should Return 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"innerCode\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.innerCode).to.eql(\"Forbidden\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Missing permission: get-notifications\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{business_owner_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"notifications"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://localhost:5000"
		}
	]
}